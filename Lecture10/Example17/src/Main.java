import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.function.Predicate;
import java.util.stream.Collector;
import java.util.stream.Collectors;

public class Main {


    public static Student createStudent(String name, int indexNo, int age){

        return new Student(name, indexNo, age);
    }


    public static void printValues(Student s) {
        System.out.println("Name: " + s.getName());
        System.out.println("IndexNo: " + s.getIndexNo());
        System.out.println("Age: " + s.getAge());
    }

       public static List<Student> getStudents(){
      List<Student> list = new ArrayList<>();
      list.add(new Student("Lucy", 28, 11));
      list.add(new Student("Kiku", 28,27));
      list.add(new Student("Peter", 32, 30));
      list.add(new Student("Steve", 49, 27));
      return list;
   }


    public static void main(String[] args) {

        List<String> names = Arrays.asList("AName","BName","CName","DName","EName");
        Random random = new Random();
        System.out.println("Print all autogenerated students: ");
        names.stream().map(x -> createStudent(x, (random.nextInt(10000 - 1) + 1), (random.nextInt(30 - 18) + 18))).forEach(s -> printValues(s));

        Predicate<Student> p1 = s -> s.name.startsWith("A");
       Predicate<Student> p2 = s -> s.age < 28 && s.name.startsWith("P");
        Predicate<Student> p3 = s -> s.age < 25;
       List<Student> list = getStudents();
        System.out.println("Print student list: ");
       list.stream().forEach(s -> printValues(s));

       /* noneMatch() method returns true if none of the stream elements matches
        * the given predicate
        */
       /* This will return false because there is a element in the stream that
        * matches the condition specified in the predicate p1.
        * Condition: Student Name should start with letter "A"
        * Stream element matched: Lucy
        */

        System.out.println("Filtering students with starting name letter L: ");
      List<Student> newList = list.stream().filter(p1).collect(Collectors.toList());
      newList.stream().forEach(s -> printValues(s));

        System.out.println("Check if all students are younger than 25: " + list.stream().allMatch(p3));
        System.out.println("Check if all students are older than 25: " + list.stream().allMatch(s -> s.age > 25));
        System.out.println("Check if atleast one student is older than 25: " + list.stream().anyMatch(p3));


       boolean b1 = list.stream().noneMatch(p1);
       System.out.println("list.stream().noneMatch(p1): "+b1);

       /* This will return true because none of the elements
        * matches the condition specified in the predicate p2.
        * Condition: Student Name should start with letter "P" and age must be <28
        * Stream element matched: none
        */
       boolean b2 = list.stream().noneMatch(p2);
       System.out.println("list.stream().noneMatch(p2): "+b2);

    }
}









